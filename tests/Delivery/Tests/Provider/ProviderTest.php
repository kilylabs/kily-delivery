<?php
namespace Kily\Delivery\Provider;

use Kily\Delivery\Model\Address;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-09-27 at 15:13:22.
 */
class ProviderTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Kily\Delivery\Provider\Provider::calculate
     * @expectedException Kily\Delivery\Exception\ShouldBeOverriden
     * @uses Kily\Delivery\Model\Address
     */
    public function testCalculate()
    {
        $p = new Provider;
        $p->calculate(new Address, new Address,[],[]);
    }

    /**
     * @covers Kily\Delivery\Provider\Provider::getName
     * @expectedException Kily\Delivery\Exception\ShouldBeOverriden
     */
    public function testGetName()
    {
        $p = new Provider;
        $p->getName();
    }

    /**
     * @covers Kily\Delivery\Provider\Provider::supports
     * @expectedException Kily\Delivery\Exception\ShouldBeOverriden
     */
    public function testSupports()
    {
        $p = new Provider;
        $p->supports();
    }

    /**
     * @covers Kily\Delivery\Provider\Provider::getServices
     */
    public function testGetServices()
    {
        $p = new Provider;
        $this->assertEquals([],$p->services);
    }

    /**
     * @covers Kily\Delivery\Provider\Provider::setServices
     */
    public function testSetServices()
    {
        $p = new Edost;
        $p->services = [\Kily\Delivery\Service\ServiceFactory::factory('ru_emspost')];
        $this->assertInstanceOf('Kily\Delivery\Service\RuEmspost',$p->services[0]);
    }

    /**
     * @covers Kily\Delivery\Provider\Provider::addService
     * @expectedException Kily\Delivery\Exception\ShouldBeOverriden
     */
    public function testAddService()
    {
        $p = new Provider;
        $p->addService(\Kily\Delivery\Service\ServiceFactory::factory('ru_emspost'));
    }

    /**
     * @covers Kily\Delivery\Provider\Provider::setFrom
     */
    public function testSetFrom()
    {
        $p = new Provider;
        $p->from = \Kily\Delivery\Utils::addrFromString("Москва");
    }

    /**
     * @covers Kily\Delivery\Provider\Provider::getFrom
     * @todo   Implement testGetFrom().
     */
    public function testGetFrom()
    {
        $p = new Provider;
        $p->from = \Kily\Delivery\Utils::addrFromString("Москва");
        $p->from;
    }

    /**
     * @covers Kily\Delivery\Provider\Provider::setOptions
     * @todo   Implement testSetOptions().
     */
    public function testSetOptions()
    {
        $object = new Edost('fake','fake');
        $object->options = [
            'weight'=>1,
            'dimensions'=>'30x30x30',
        ];
    }

    /**
     * @covers Kily\Delivery\Provider\Provider::getOptions
     */
    public function testGetOptions()
    {
        $object = new Edost('fake','fake');
        $object->options = [
            'weight'=>1,
            'dimensions'=>'30x30x30',
        ];
        $this->assertObjectHasAttribute('weight',$object->options);
        $this->assertObjectHasAttribute('width',$object->options);
        $this->assertEquals(30,$object->options->width);
        $this->assertEquals(1,$object->options->weight);
    }

    /**
     * @covers Kily\Delivery\Provider\Provider::getOption
     */
    public function testGetOption()
    {
        $object = new Edost('fake','fake');
        $object->options = [
            'weight'=>1,
            'dimensions'=>'30x30x30',
        ];
        $this->assertEquals(30,$object->getOption('width'));
    }
}
