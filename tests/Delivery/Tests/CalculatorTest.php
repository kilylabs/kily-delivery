<?php
namespace Kily\Delivery;

use Kily\Delivery\Config;
use Kily\Delivery\Service\Service;
use Kily\Delivery\Provider\ProviderFactory;
use Kily\Delivery\Service\ServiceFactory;
use Kily\Delivery\Model\Address;
use Kily\Delivery\Model\GeocodedAddress;
use Kily\Delivery\Model\RawAddress;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-09-27 at 15:12:20.
 */
class CalculatorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Calculator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @dataProvider calculatorProvider
     * @covers Kily\Delivery\Calculator::calculate
     */
    public function testCalculate($provider,$from,$to,$services,$options)
    {
        $calc = new \Kily\Delivery\Calculator($provider,$from,$to,$services,$options);
        $result = $calc->calculate();
        $this->assertInternalType('array',$result);
    }

    /**
     * @covers Kily\Delivery\Calculator::best
     */
    public function testBest()
    {
        if (!isset($_SERVER['EDOST_API_SHOP_ID']) || !isset($_SERVER['EDOST_API_PASS'])) {
            $this->markTestSkipped('You need to configure the EDOST_API_SHOP_ID and EDOST_API_PASS value in phpunit.xml');
        }

        $provider = new \Kily\Delivery\Provider\Edost($_SERVER['EDOST_API_SHOP_ID'],$_SERVER['EDOST_API_PASS']);
        $calc = new \Kily\Delivery\Calculator($provider,new GeocodedAddress('Москва, ул. Годовикова 9с14'),new GeocodedAddress('Санкт-Петербург'),'ru_emspost,ponyexpress',[
            'weight'=>1,
            'dimensions'=>'30x30x30',
        ]);
        $result = $calc->best();
        $this->assertObjectHasAttribute('cost',$result);
    }

    /**
     * @covers Kily\Delivery\Calculator::setProvider
     */
    public function testSetProvider()
    {
        $provider = new \Kily\Delivery\Provider\Provider;
        $calc = new \Kily\Delivery\Calculator($provider);
        $calc->provider = new \Kily\Delivery\Provider\Edost('fake','fake');
        $this->assertInstanceOf('Kily\Delivery\Provider\Edost',$calc->provider);
    }

    /**
     * @covers Kily\Delivery\Calculator::getProvider
     */
    public function testGetProvider()
    {
        $provider = new \Kily\Delivery\Provider\Edost('fake','fake');
        $calc = new \Kily\Delivery\Calculator($provider);
        $this->assertInstanceOf('Kily\Delivery\Provider\Edost',$calc->provider);
    }

    /**
     * @covers Kily\Delivery\Calculator::setServices
     * @expectedException Kily\Delivery\Exception\NotSupported
     */
    public function testSetServicesBad()
    {
        $provider = new \Kily\Delivery\Provider\Edost('fake','fake');
        $calc = new \Kily\Delivery\Calculator($provider);
        $calc->services = ['dummy'];
    }

    /**
     * @covers Kily\Delivery\Calculator::getServices
     */
    public function testGetServicesGood()
    {
        $provider = new \Kily\Delivery\Provider\Edost('fake','fake');
        $calc = new \Kily\Delivery\Calculator($provider);
        $calc->services = ['ru_emspost'];
        $this->assertInstanceOf('Kily\Delivery\Service\RuEmspost',$calc->services[0]);
    }

    /**
     * @covers Kily\Delivery\Calculator::setOptions
     * @expectedException Kily\Delivery\Exception\BadOption
     */
    public function testSetOptionsBad()
    {
        $provider = new \Kily\Delivery\Provider\Edost('fake','fake');
        $calc = new \Kily\Delivery\Calculator($provider);
        $calc->setOptions([
            'bad_option'=>'ololo',
        ]);
    }

    /**
     * @covers Kily\Delivery\Calculator::getOptions
     */
    public function testGetOptions()
    {
        $provider = new \Kily\Delivery\Provider\Edost('fake','fake');
        $calc = new \Kily\Delivery\Calculator($provider);
        $this->assertInternalType('array',$calc->options);
    }

    public function calculatorProvider() {
        $dataset = [];
        $faker = \Faker\Factory::create('ru_RU');
        $providers = ProviderFactory::listProviders();
        foreach($providers as $provider) {
            $provider = ProviderFactory::factory($provider);
            $api_id_key = strtoupper($provider->getName()).'_API_ID';
            $api_key_key = strtoupper($provider->getName()).'_API_KEY';
            if(!isset($_SERVER[$api_id_key])) 
                $this->markTestSkipped('You need to configure the '.$api_id_key.' and '.$api_key_key.' value in phpunit.xml');
            $provider->api_id = $_SERVER[$api_id_key];
            $provider->api_key = $_SERVER[$api_key_key];

            foreach($provider->supports() as $service) {
                $ret = Service::parseServicesStr($service);
                list($service,$subservices) = $ret[0];
                $service = ServiceFactory::factory($service);
                foreach(['RawAddress','Address','GeocodedAddress'] as $class) {
                    if($subservices = $service->subservices()) {
                        $subservices = $faker->randomElements($subservices,$faker->numberBetween(0,count($subservices)));
                    }

                    if($class === 'Address') {
                        $fake_address = new GeocodedAddress($faker->address);
                        $address = new Address;
                        foreach($fake_address->toArray() as $k=>$v) {
                            $address->$k = $v;
                        }
                    } else {
                        $a_class = '\Kily\Delivery\Model\\'.$class;
                        $address = new $a_class($faker->address);
                    }

                    if($provider->getName() == 'edost') {
                        $address->locality = $faker->randomElement(['Москва','Санкт-Петербург','Мурманск','Нижний новгород','Владивосток','Новосибирск']);
                    }

                    $service_string = $service->getName().($subservices?'['.implode(',',$subservices).']':'');
                    $options = array_merge(['weight'],$faker->randomElements(['volume','width','height','length','dimensions'],$faker->numberBetween(0,5)));
                    $tmpopts = [];
                    foreach($options as $option) {
                        switch($option) {
                        case 'weight': $tmpopts[$option] = $faker->randomFloat(3,0,20); break;
                        case 'volume': $tmpopts[$option] = $faker->randomFloat(3,0,1); break;
                        case 'width': $tmpopts[$option] = $faker->randomFloat(2,0,1); break;
                        case 'height': $tmpopts[$option] = $faker->randomFloat(2,0,1); break;
                        case 'length': $tmpopts[$option] = $faker->randomFloat(2,0,1); break;
                        case 'dimensions': $tmpopts[$option] = implode('x',[$faker->randomFloat(2,0,1),$faker->randomFloat(2,0,1),$faker->randomFloat(2,0,1)]); break;
                        }
                    }
                    $options = $tmpopts;
                    $dataset[] = [$provider,$faker->randomElement([null,$faker->address]),$address,$service_string,$options];
                }
            }
        }
        return $dataset;
    }

}
